#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';
const app = require('../app');
const debug = require('debug')('knowledge:server');
const http = require('http');
const config = require('../config');

const socketIO = require('socket.io');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.listenPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function startSocketIO(server){

    const rq = require('../socketRoutes/rq');
    const resource = require('../socketRoutes/resource');
    let table = {rq, resource};

    let io = socketIO(server);
    io.on('connect', (socket) => {
        for(let key in table){
            (function(eventName, func){
                socket.on(eventName,(data, cb)=>{
                    cb=typeof cb === "function"?cb:function () {};
                    try{
                        func(data, cb);
                    }catch(err){
                        let result = {status:'error', location:"local", msg:err};
                        cb(result);
                    }
                });
            })(key, table[key]);
        }
    });
    return io;
}
let io = startSocketIO(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
